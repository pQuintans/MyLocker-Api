generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model apm {
  id                 Int     @id @default(autoincrement())
  requisitionPDF     String
  status             Int     @default(1) //0 - rejeitada, 1 - pendente, 2 - aprovada
  FK_functionary_cpf String? @db.VarChar(12)

  functionary functionary? @relation(fields: [FK_functionary_cpf], references: [cpf], onDelete: Cascade, map: "FKFunctionaryCpfApm")
  student     student?

  @@index([FK_functionary_cpf], map: "FKFunctionaryCpfApm")
}

model functionary {
  cpf                 String  @id @db.VarChar(10)
  first_name          String  @db.VarChar(20)
  last_name           String  @db.VarChar(20)
  email               String  @unique @db.VarChar(50)
  password            String
  status              Int     @default(1) @db.TinyInt
  profile_picture_url String?
  code                String? @db.VarChar(6)

  apm apm[]
}

model locker {
  number        Int     @id
  isRented      Int     @db.TinyInt
  rentedAt      String?
  FK_section_id Int
  status        Int     @default(1) @db.TinyInt

  section section  @relation(fields: [FK_section_id], references: [id], onDelete: Cascade, map: "FKSectionIdLocker")
  student student?

  @@index([FK_section_id], map: "FKSectionIdLocker")
}

model section {
  id         Int      @id @default(autoincrement())
  color      String   @db.VarChar(10)
  left_room  String   @db.VarChar(20)
  right_room String   @db.VarChar(20)
  status     Int      @default(1) @db.TinyInt
  locker     locker[]
}

model student {
  ra                  String  @id @db.VarChar(12)
  first_name          String  @db.VarChar(20)
  last_name           String  @db.VarChar(20)
  email               String  @unique @db.VarChar(50)
  password            String?
  code                String? @db.VarChar(6)
  locker_number       Int?    @unique
  status              Int     @default(1) @db.TinyInt
  profile_picture_url String? @db.VarChar(255)
  FK_apm_id           Int?    @unique

  locker locker? @relation(fields: [locker_number], references: [number], onDelete: Cascade, map: "FKLockerNumberStudent")
  apm    apm?    @relation(fields: [FK_apm_id], references: [id], onDelete: Cascade, map: "FKApmIdStudent")

  @@index([locker_number], map: "FKLockerNumberStudent")
  @@index([FK_apm_id], map: "FKApmIdStudent")
}
